basePath: /api/v1
definitions:
  apperrors.DuplicateError:
    properties:
      field:
        type: string
    type: object
  apperrors.InvalidInputError:
    properties:
      message:
        type: string
    type: object
  apperrors.NotFoundError:
    properties:
      id:
        type: string
      resource:
        type: string
    type: object
  model.Post:
    properties:
      content:
        example: My First Post Content
        type: string
      createdAt:
        example: "2025-07-18T15:04:05Z"
        type: string
      id:
        example: 4e76b320-d5b7-4a0a-bb0f-2049fe6a91a7
        type: string
      title:
        example: My First Post
        type: string
      updatedAt:
        example: "2025-08-19T15:04:05Z"
        type: string
      user:
        $ref: '#/definitions/model.User'
      userID:
        type: string
    required:
    - content
    - title
    type: object
  model.User:
    properties:
      created_at:
        example: "2025-07-18T15:04:05Z"
        type: string
      email:
        example: mike@example.com
        type: string
      id:
        example: b9e69a63-4f4b-4ea7-8c71-3b73fe62e6d7
        type: string
      posts:
        items:
          $ref: '#/definitions/model.Post'
        type: array
      username:
        example: mike
        type: string
    type: object
  post.CreatePostRequest:
    properties:
      author_id:
        type: string
      content:
        type: string
      title:
        type: string
    required:
      - author_id
      - content
      - title
    type: object
  post.Response:
    properties:
      author:
        $ref: '#/definitions/post.UserSummaryResponse'
      content:
        type: string
      created_at:
        type: string
      post_id:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  post.UpdatePostRequest:
    properties:
      content:
        type: string
      title:
        type: string
    type: object
  post.UserSummaryResponse:
    properties:
      email:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
  user.CreateUserRequest:
    properties:
      email:
        type: string
      username:
        type: string
    required:
      - email
      - username
    type: object
  user.PostSummaryResponse:
    properties:
      post_id:
        format: uuid
        type: string
      title:
        example: My First Post
        type: string
    type: object
  user.Response:
    properties:
      email:
        type: string
      joined_at:
        type: string
      posts:
        items:
          $ref: '#/definitions/user.PostSummaryResponse'
        type: array
      user_id:
        type: string
      username:
        type: string
    type: object
  user.UpdateUserRequest:
    properties:
      email:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: michael@example.com
    name: Michael Obeng
    url: https://github.com/pandahawk
  description: This is a simple blog API built with Go and Gin
  title: Blog API
  version: "1.0"
paths:
  /posts:
    get:
      description: Get all posts in the system
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Post'
            type: array
      summary: Get all posts
      tags:
        - posts
    post:
      consumes:
        - application/json
      description: Creates a new post and returns the created resource
      parameters:
        - description: Post data
          in: body
          name: post
          required: true
          schema:
            $ref: '#/definitions/post.CreatePostRequest'
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/post.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.InvalidInputError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apperrors.DuplicateError'
      summary: Create a new post
      tags:
        - posts
  /posts/{id}:
    delete:
      consumes:
        - application/json
      description: Deletes an existing post
      parameters:
        - description: Post ID
          format: uuid
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.InvalidInputError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperrors.NotFoundError'
      summary: Delete post by ID
      tags:
        - posts
    get:
      description: Get the post with the specified ID
      parameters:
        - description: Post ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/post.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.InvalidInputError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperrors.NotFoundError'
      summary: Get post by ID
      tags:
        - posts
    patch:
      consumes:
        - application/json
      description: Updates an existing post and returns the updated resource
      parameters:
        - description: Post ID
          format: uuid
          in: path
          name: id
          required: true
          type: string
        - description: Post update data
          in: body
          name: post
          required: true
          schema:
            $ref: '#/definitions/post.UpdatePostRequest'
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/post.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.DuplicateError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperrors.NotFoundError'
      summary: Update post by ID
      tags:
        - posts
  /users:
    get:
      description: Get all users in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.Response'
            type: array
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Creates a new user and returns the created resource
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.InvalidInputError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apperrors.DuplicateError'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing user
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.InvalidInputError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperrors.NotFoundError'
      summary: Delete user by ID
      tags:
      - users
    get:
      description: Get the user with the specified ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.InvalidInputError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperrors.NotFoundError'
      summary: Get user by ID
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Updates an existing user and returns the updated resource
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.DuplicateError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperrors.NotFoundError'
      summary: Update user by ID
      tags:
      - users
swagger: "2.0"
