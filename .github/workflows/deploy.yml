name: Deploy to Hetzner

on:
  workflow_run:
    workflows: [ "Go" ]
    types: [ completed ]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

      #change host to match prod url
    - name: Install swag CLI
      run: go install github.com/swaggo/swag/cmd/swag@latest

    - name: Add Go bin to PATH
      run: echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Set Swagger host to prod and generate docs
      run: |
        sed -i 's|@host .*|@host blog.pandahawk.dev|' main.go
        swag init

    - name: Download Swagger UI static files
      run: |
        curl -L https://github.com/swagger-api/swagger-ui/archive/refs/tags/v5.12.2.tar.gz | tar xz
        cp -r swagger-ui-5.12.2/dist/* docs/
        
      # load env vars
    - name: Create .env file from secrets and variables
      run: |
        cat > .env <<EOF
        # DB and app settings
        DB_USER=${{ vars.DB_USER }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_NAME=${{ vars.DB_NAME }}
        DB_PORT=${{ vars.DB_PORT }}
        DB_HOST=${{ vars.DB_HOST }}
        PORT=${{ vars.PORT }}
        
        # API key
        API_KEY=${{ secrets.API_KEY }}
        
        # Postgres container env
        POSTGRES_USER=${{ vars.DB_USER }}
        POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
        POSTGRES_DB=${{ vars.DB_NAME }}
        EOF

    - name: Add SSH key for deploy
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

      # docker compose
    - name: Copy compose and env files to server
      run: |
        rsync -avz -e 'ssh -o StrictHostKeyChecking=no' docker-compose.yml .env root@${{ secrets.HETZNER_HOST }}:/root/app/

    - name: Copy docs to Caddy static directory
      run: |
        rsync -avz -e 'ssh -o StrictHostKeyChecking=no' docs/ root@${{ secrets.HETZNER_HOST }}:/srv/app/docs/

    - name: Docker login on server
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.HETZNER_HOST }} \
          "echo '${{ secrets.DOCKERHUB_TOKEN }}' | docker login -u '${{ secrets.DOCKERHUB_USERNAME }}' --password-stdin"
   
    - name: Deploy with Docker Compose
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.HETZNER_HOST }} '
          cd /root/app &&
          docker compose pull &&
          docker compose up -d
        '
